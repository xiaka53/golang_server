// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: money.proto

package pkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//充值请求
type RechangeRepuest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//token
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	//账号
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	//金额
	Amount float32 `protobuf:"fixed32,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *RechangeRepuest) Reset() {
	*x = RechangeRepuest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_money_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RechangeRepuest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RechangeRepuest) ProtoMessage() {}

func (x *RechangeRepuest) ProtoReflect() protoreflect.Message {
	mi := &file_money_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RechangeRepuest.ProtoReflect.Descriptor instead.
func (*RechangeRepuest) Descriptor() ([]byte, []int) {
	return file_money_proto_rawDescGZIP(), []int{0}
}

func (x *RechangeRepuest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RechangeRepuest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *RechangeRepuest) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

//申请退款
type RefundMoneyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//token
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	//账号
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	//金额
	Amount float32 `protobuf:"fixed32,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *RefundMoneyRequest) Reset() {
	*x = RefundMoneyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_money_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundMoneyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundMoneyRequest) ProtoMessage() {}

func (x *RefundMoneyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_money_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundMoneyRequest.ProtoReflect.Descriptor instead.
func (*RefundMoneyRequest) Descriptor() ([]byte, []int) {
	return file_money_proto_rawDescGZIP(), []int{1}
}

func (x *RefundMoneyRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RefundMoneyRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *RefundMoneyRequest) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

//执行返回
type ExecMoneyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//执行状态
	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	//执行错误时错误信息
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ExecMoneyResponse) Reset() {
	*x = ExecMoneyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_money_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecMoneyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecMoneyResponse) ProtoMessage() {}

func (x *ExecMoneyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_money_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecMoneyResponse.ProtoReflect.Descriptor instead.
func (*ExecMoneyResponse) Descriptor() ([]byte, []int) {
	return file_money_proto_rawDescGZIP(), []int{2}
}

func (x *ExecMoneyResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *ExecMoneyResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_money_proto protoreflect.FileDescriptor

var file_money_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x22, 0x59, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x5c, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x3d, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x32,
	0x99, 0x01, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x08, 0x52, 0x65, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4a, 0x0a, 0x0b, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1c,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e,
	0x2f, 0x70, 0x6b, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_money_proto_rawDescOnce sync.Once
	file_money_proto_rawDescData = file_money_proto_rawDesc
)

func file_money_proto_rawDescGZIP() []byte {
	file_money_proto_rawDescOnce.Do(func() {
		file_money_proto_rawDescData = protoimpl.X.CompressGZIP(file_money_proto_rawDescData)
	})
	return file_money_proto_rawDescData
}

var file_money_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_money_proto_goTypes = []interface{}{
	(*RechangeRepuest)(nil),    // 0: interact.RechangeRepuest
	(*RefundMoneyRequest)(nil), // 1: interact.RefundMoneyRequest
	(*ExecMoneyResponse)(nil),  // 2: interact.ExecMoneyResponse
}
var file_money_proto_depIdxs = []int32{
	0, // 0: interact.Money.Rechange:input_type -> interact.RechangeRepuest
	1, // 1: interact.Money.RefundMoney:input_type -> interact.RefundMoneyRequest
	2, // 2: interact.Money.Rechange:output_type -> interact.ExecMoneyResponse
	2, // 3: interact.Money.RefundMoney:output_type -> interact.ExecMoneyResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_money_proto_init() }
func file_money_proto_init() {
	if File_money_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_money_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RechangeRepuest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_money_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundMoneyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_money_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecMoneyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_money_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_money_proto_goTypes,
		DependencyIndexes: file_money_proto_depIdxs,
		MessageInfos:      file_money_proto_msgTypes,
	}.Build()
	File_money_proto = out.File
	file_money_proto_rawDesc = nil
	file_money_proto_goTypes = nil
	file_money_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MoneyClient is the client API for Money service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MoneyClient interface {
	//执行充值
	Rechange(ctx context.Context, in *RechangeRepuest, opts ...grpc.CallOption) (*ExecMoneyResponse, error)
	//申请退款
	RefundMoney(ctx context.Context, in *RefundMoneyRequest, opts ...grpc.CallOption) (*ExecMoneyResponse, error)
}

type moneyClient struct {
	cc grpc.ClientConnInterface
}

func NewMoneyClient(cc grpc.ClientConnInterface) MoneyClient {
	return &moneyClient{cc}
}

func (c *moneyClient) Rechange(ctx context.Context, in *RechangeRepuest, opts ...grpc.CallOption) (*ExecMoneyResponse, error) {
	out := new(ExecMoneyResponse)
	err := c.cc.Invoke(ctx, "/interact.Money/Rechange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyClient) RefundMoney(ctx context.Context, in *RefundMoneyRequest, opts ...grpc.CallOption) (*ExecMoneyResponse, error) {
	out := new(ExecMoneyResponse)
	err := c.cc.Invoke(ctx, "/interact.Money/RefundMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoneyServer is the server API for Money service.
type MoneyServer interface {
	//执行充值
	Rechange(context.Context, *RechangeRepuest) (*ExecMoneyResponse, error)
	//申请退款
	RefundMoney(context.Context, *RefundMoneyRequest) (*ExecMoneyResponse, error)
}

// UnimplementedMoneyServer can be embedded to have forward compatible implementations.
type UnimplementedMoneyServer struct {
}

func (*UnimplementedMoneyServer) Rechange(context.Context, *RechangeRepuest) (*ExecMoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rechange not implemented")
}
func (*UnimplementedMoneyServer) RefundMoney(context.Context, *RefundMoneyRequest) (*ExecMoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundMoney not implemented")
}

func RegisterMoneyServer(s *grpc.Server, srv MoneyServer) {
	s.RegisterService(&_Money_serviceDesc, srv)
}

func _Money_Rechange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RechangeRepuest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyServer).Rechange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interact.Money/Rechange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyServer).Rechange(ctx, req.(*RechangeRepuest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Money_RefundMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundMoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyServer).RefundMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interact.Money/RefundMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyServer).RefundMoney(ctx, req.(*RefundMoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Money_serviceDesc = grpc.ServiceDesc{
	ServiceName: "interact.Money",
	HandlerType: (*MoneyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Rechange",
			Handler:    _Money_Rechange_Handler,
		},
		{
			MethodName: "RefundMoney",
			Handler:    _Money_RefundMoney_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "money.proto",
}
