// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: vip.proto

package pkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//Vip状态
type VipInfo_VipStatus int32

const (
	//开启状态
	VipInfo_On VipInfo_VipStatus = 0
	//关闭状态
	VipInfo_Off VipInfo_VipStatus = 1
)

// Enum value maps for VipInfo_VipStatus.
var (
	VipInfo_VipStatus_name = map[int32]string{
		0: "On",
		1: "Off",
	}
	VipInfo_VipStatus_value = map[string]int32{
		"On":  0,
		"Off": 1,
	}
)

func (x VipInfo_VipStatus) Enum() *VipInfo_VipStatus {
	p := new(VipInfo_VipStatus)
	*p = x
	return p
}

func (x VipInfo_VipStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VipInfo_VipStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_vip_proto_enumTypes[0].Descriptor()
}

func (VipInfo_VipStatus) Type() protoreflect.EnumType {
	return &file_vip_proto_enumTypes[0]
}

func (x VipInfo_VipStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VipInfo_VipStatus.Descriptor instead.
func (VipInfo_VipStatus) EnumDescriptor() ([]byte, []int) {
	return file_vip_proto_rawDescGZIP(), []int{2, 0}
}

//获取列表
type VipListRepuest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//token
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	//筛选名称
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	//页数
	Page int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	//每页条数
	From int32 `protobuf:"varint,4,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *VipListRepuest) Reset() {
	*x = VipListRepuest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vip_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipListRepuest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipListRepuest) ProtoMessage() {}

func (x *VipListRepuest) ProtoReflect() protoreflect.Message {
	mi := &file_vip_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipListRepuest.ProtoReflect.Descriptor instead.
func (*VipListRepuest) Descriptor() ([]byte, []int) {
	return file_vip_proto_rawDescGZIP(), []int{0}
}

func (x *VipListRepuest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *VipListRepuest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *VipListRepuest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *VipListRepuest) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

//返回列表信息
type VipListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//总条数
	TotalCount int32 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	//vip信息列表
	List []*VipInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *VipListResponse) Reset() {
	*x = VipListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vip_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipListResponse) ProtoMessage() {}

func (x *VipListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vip_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipListResponse.ProtoReflect.Descriptor instead.
func (*VipListResponse) Descriptor() ([]byte, []int) {
	return file_vip_proto_rawDescGZIP(), []int{1}
}

func (x *VipListResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *VipListResponse) GetList() []*VipInfo {
	if x != nil {
		return x.List
	}
	return nil
}

//vip信息
type VipInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//LOGO
	Logo string `protobuf:"bytes,1,opt,name=logo,proto3" json:"logo,omitempty"`
	//名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	//价格
	Price float32 `protobuf:"fixed32,3,opt,name=price,proto3" json:"price,omitempty"`
	//简介
	Msg string `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
	//标识
	Mark int32 `protobuf:"varint,5,opt,name=mark,proto3" json:"mark,omitempty"`
	//开通数量
	Count int64 `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	//状态
	Status VipInfo_VipStatus `protobuf:"varint,7,opt,name=status,proto3,enum=interact.VipInfo_VipStatus" json:"status,omitempty"`
}

func (x *VipInfo) Reset() {
	*x = VipInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vip_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipInfo) ProtoMessage() {}

func (x *VipInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vip_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipInfo.ProtoReflect.Descriptor instead.
func (*VipInfo) Descriptor() ([]byte, []int) {
	return file_vip_proto_rawDescGZIP(), []int{2}
}

func (x *VipInfo) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *VipInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VipInfo) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *VipInfo) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *VipInfo) GetMark() int32 {
	if x != nil {
		return x.Mark
	}
	return 0
}

func (x *VipInfo) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *VipInfo) GetStatus() VipInfo_VipStatus {
	if x != nil {
		return x.Status
	}
	return VipInfo_On
}

//执行开通会员
type OpenVipRepuest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//token
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	//账号
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	//vip标识
	Mark int32 `protobuf:"varint,3,opt,name=mark,proto3" json:"mark,omitempty"`
	//备注
	Memo *string `protobuf:"bytes,4,opt,name=memo,proto3,oneof" json:"memo,omitempty"`
}

func (x *OpenVipRepuest) Reset() {
	*x = OpenVipRepuest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vip_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenVipRepuest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenVipRepuest) ProtoMessage() {}

func (x *OpenVipRepuest) ProtoReflect() protoreflect.Message {
	mi := &file_vip_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenVipRepuest.ProtoReflect.Descriptor instead.
func (*OpenVipRepuest) Descriptor() ([]byte, []int) {
	return file_vip_proto_rawDescGZIP(), []int{3}
}

func (x *OpenVipRepuest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *OpenVipRepuest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *OpenVipRepuest) GetMark() int32 {
	if x != nil {
		return x.Mark
	}
	return 0
}

func (x *OpenVipRepuest) GetMemo() string {
	if x != nil && x.Memo != nil {
		return *x.Memo
	}
	return ""
}

//添加会员类型
type AddVipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//LOGO
	Logo string `protobuf:"bytes,1,opt,name=logo,proto3" json:"logo,omitempty"`
	//名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	//价格
	Price float32 `protobuf:"fixed32,3,opt,name=price,proto3" json:"price,omitempty"`
	//简介
	Msg string `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
	//token
	Token string `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *AddVipRequest) Reset() {
	*x = AddVipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vip_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddVipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddVipRequest) ProtoMessage() {}

func (x *AddVipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vip_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddVipRequest.ProtoReflect.Descriptor instead.
func (*AddVipRequest) Descriptor() ([]byte, []int) {
	return file_vip_proto_rawDescGZIP(), []int{4}
}

func (x *AddVipRequest) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *AddVipRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddVipRequest) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AddVipRequest) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AddVipRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

//修改会员类型
type EditVipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//LOGO
	Logo *string `protobuf:"bytes,1,opt,name=logo,proto3,oneof" json:"logo,omitempty"`
	//名称
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	//价格
	Price *float32 `protobuf:"fixed32,3,opt,name=price,proto3,oneof" json:"price,omitempty"`
	//简介
	Msg *string `protobuf:"bytes,4,opt,name=msg,proto3,oneof" json:"msg,omitempty"`
	//vip标识
	Mark int32 `protobuf:"varint,5,opt,name=mark,proto3" json:"mark,omitempty"`
	//token
	Token string `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *EditVipRequest) Reset() {
	*x = EditVipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vip_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditVipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditVipRequest) ProtoMessage() {}

func (x *EditVipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vip_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditVipRequest.ProtoReflect.Descriptor instead.
func (*EditVipRequest) Descriptor() ([]byte, []int) {
	return file_vip_proto_rawDescGZIP(), []int{5}
}

func (x *EditVipRequest) GetLogo() string {
	if x != nil && x.Logo != nil {
		return *x.Logo
	}
	return ""
}

func (x *EditVipRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EditVipRequest) GetPrice() float32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *EditVipRequest) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *EditVipRequest) GetMark() int32 {
	if x != nil {
		return x.Mark
	}
	return 0
}

func (x *EditVipRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

//开启或关闭会员类型
type OpenOrCloseVipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//token
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	//vip标识
	Mark int32 `protobuf:"varint,2,opt,name=mark,proto3" json:"mark,omitempty"`
}

func (x *OpenOrCloseVipRequest) Reset() {
	*x = OpenOrCloseVipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vip_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenOrCloseVipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenOrCloseVipRequest) ProtoMessage() {}

func (x *OpenOrCloseVipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vip_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenOrCloseVipRequest.ProtoReflect.Descriptor instead.
func (*OpenOrCloseVipRequest) Descriptor() ([]byte, []int) {
	return file_vip_proto_rawDescGZIP(), []int{6}
}

func (x *OpenOrCloseVipRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *OpenOrCloseVipRequest) GetMark() int32 {
	if x != nil {
		return x.Mark
	}
	return 0
}

//会员返回
type VipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//执行状态
	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	//执行错误时错误信息
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *VipResponse) Reset() {
	*x = VipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vip_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipResponse) ProtoMessage() {}

func (x *VipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vip_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipResponse.ProtoReflect.Descriptor instead.
func (*VipResponse) Descriptor() ([]byte, []int) {
	return file_vip_proto_rawDescGZIP(), []int{7}
}

func (x *VipResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *VipResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_vip_proto protoreflect.FileDescriptor

var file_vip_proto_rawDesc = []byte{
	0x0a, 0x09, 0x76, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x22, 0x70, 0x0a, 0x0e, 0x56, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x0f, 0x56, 0x69, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x07, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f,
	0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x56, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x69, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1c, 0x0a,
	0x09, 0x56, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x6e,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x66, 0x66, 0x10, 0x01, 0x22, 0x76, 0x0a, 0x0e, 0x4f,
	0x70, 0x65, 0x6e, 0x56, 0x69, 0x70, 0x52, 0x65, 0x70, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x22, 0x75, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x56, 0x69, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc2, 0x01, 0x0a, 0x0e, 0x45,
	0x64, 0x69, 0x74, 0x56, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6c,
	0x6f, 0x67, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6c, 0x6f, 0x67, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x73, 0x67, 0x22,
	0x41, 0x0a, 0x15, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x56, 0x69,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61,
	0x72, 0x6b, 0x22, 0x37, 0x0a, 0x0b, 0x56, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x32, 0xfd, 0x02, 0x0a, 0x03,
	0x56, 0x69, 0x70, 0x12, 0x3d, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x56, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x56, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x39, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x18, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x69, 0x70, 0x52, 0x65, 0x70,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x56, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a,
	0x06, 0x41, 0x64, 0x64, 0x56, 0x69, 0x70, 0x12, 0x17, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x56, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x56, 0x69, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x05, 0x4f, 0x6e, 0x56,
	0x69, 0x70, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x4f, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x56, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x56,
	0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x04,
	0x45, 0x64, 0x69, 0x74, 0x12, 0x18, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x45, 0x64, 0x69, 0x74, 0x56, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x56, 0x69, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x56, 0x69,
	0x70, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x4f, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x56, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x56, 0x69,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e,
	0x2f, 0x70, 0x6b, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vip_proto_rawDescOnce sync.Once
	file_vip_proto_rawDescData = file_vip_proto_rawDesc
)

func file_vip_proto_rawDescGZIP() []byte {
	file_vip_proto_rawDescOnce.Do(func() {
		file_vip_proto_rawDescData = protoimpl.X.CompressGZIP(file_vip_proto_rawDescData)
	})
	return file_vip_proto_rawDescData
}

var file_vip_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vip_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_vip_proto_goTypes = []interface{}{
	(VipInfo_VipStatus)(0),        // 0: interact.VipInfo.VipStatus
	(*VipListRepuest)(nil),        // 1: interact.VipListRepuest
	(*VipListResponse)(nil),       // 2: interact.VipListResponse
	(*VipInfo)(nil),               // 3: interact.VipInfo
	(*OpenVipRepuest)(nil),        // 4: interact.OpenVipRepuest
	(*AddVipRequest)(nil),         // 5: interact.AddVipRequest
	(*EditVipRequest)(nil),        // 6: interact.EditVipRequest
	(*OpenOrCloseVipRequest)(nil), // 7: interact.OpenOrCloseVipRequest
	(*VipResponse)(nil),           // 8: interact.VipResponse
}
var file_vip_proto_depIdxs = []int32{
	3, // 0: interact.VipListResponse.list:type_name -> interact.VipInfo
	0, // 1: interact.VipInfo.status:type_name -> interact.VipInfo.VipStatus
	1, // 2: interact.Vip.List:input_type -> interact.VipListRepuest
	4, // 3: interact.Vip.Open:input_type -> interact.OpenVipRepuest
	5, // 4: interact.Vip.AddVip:input_type -> interact.AddVipRequest
	7, // 5: interact.Vip.OnVip:input_type -> interact.OpenOrCloseVipRequest
	6, // 6: interact.Vip.Edit:input_type -> interact.EditVipRequest
	7, // 7: interact.Vip.OffVip:input_type -> interact.OpenOrCloseVipRequest
	2, // 8: interact.Vip.List:output_type -> interact.VipListResponse
	8, // 9: interact.Vip.Open:output_type -> interact.VipResponse
	8, // 10: interact.Vip.AddVip:output_type -> interact.VipResponse
	8, // 11: interact.Vip.OnVip:output_type -> interact.VipResponse
	8, // 12: interact.Vip.Edit:output_type -> interact.VipResponse
	8, // 13: interact.Vip.OffVip:output_type -> interact.VipResponse
	8, // [8:14] is the sub-list for method output_type
	2, // [2:8] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_vip_proto_init() }
func file_vip_proto_init() {
	if File_vip_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vip_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipListRepuest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vip_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vip_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vip_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenVipRepuest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vip_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddVipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vip_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditVipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vip_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenOrCloseVipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vip_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vip_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_vip_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_vip_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vip_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vip_proto_goTypes,
		DependencyIndexes: file_vip_proto_depIdxs,
		EnumInfos:         file_vip_proto_enumTypes,
		MessageInfos:      file_vip_proto_msgTypes,
	}.Build()
	File_vip_proto = out.File
	file_vip_proto_rawDesc = nil
	file_vip_proto_goTypes = nil
	file_vip_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VipClient is the client API for Vip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VipClient interface {
	//列表
	List(ctx context.Context, in *VipListRepuest, opts ...grpc.CallOption) (*VipListResponse, error)
	//执行开通
	Open(ctx context.Context, in *OpenVipRepuest, opts ...grpc.CallOption) (*VipResponse, error)
	//添加会员种类
	AddVip(ctx context.Context, in *AddVipRequest, opts ...grpc.CallOption) (*VipResponse, error)
	//开启会员
	OnVip(ctx context.Context, in *OpenOrCloseVipRequest, opts ...grpc.CallOption) (*VipResponse, error)
	//修改会员信息
	Edit(ctx context.Context, in *EditVipRequest, opts ...grpc.CallOption) (*VipResponse, error)
	//关闭会员
	OffVip(ctx context.Context, in *OpenOrCloseVipRequest, opts ...grpc.CallOption) (*VipResponse, error)
}

type vipClient struct {
	cc grpc.ClientConnInterface
}

func NewVipClient(cc grpc.ClientConnInterface) VipClient {
	return &vipClient{cc}
}

func (c *vipClient) List(ctx context.Context, in *VipListRepuest, opts ...grpc.CallOption) (*VipListResponse, error) {
	out := new(VipListResponse)
	err := c.cc.Invoke(ctx, "/interact.Vip/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) Open(ctx context.Context, in *OpenVipRepuest, opts ...grpc.CallOption) (*VipResponse, error) {
	out := new(VipResponse)
	err := c.cc.Invoke(ctx, "/interact.Vip/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) AddVip(ctx context.Context, in *AddVipRequest, opts ...grpc.CallOption) (*VipResponse, error) {
	out := new(VipResponse)
	err := c.cc.Invoke(ctx, "/interact.Vip/AddVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) OnVip(ctx context.Context, in *OpenOrCloseVipRequest, opts ...grpc.CallOption) (*VipResponse, error) {
	out := new(VipResponse)
	err := c.cc.Invoke(ctx, "/interact.Vip/OnVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) Edit(ctx context.Context, in *EditVipRequest, opts ...grpc.CallOption) (*VipResponse, error) {
	out := new(VipResponse)
	err := c.cc.Invoke(ctx, "/interact.Vip/Edit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) OffVip(ctx context.Context, in *OpenOrCloseVipRequest, opts ...grpc.CallOption) (*VipResponse, error) {
	out := new(VipResponse)
	err := c.cc.Invoke(ctx, "/interact.Vip/OffVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VipServer is the server API for Vip service.
type VipServer interface {
	//列表
	List(context.Context, *VipListRepuest) (*VipListResponse, error)
	//执行开通
	Open(context.Context, *OpenVipRepuest) (*VipResponse, error)
	//添加会员种类
	AddVip(context.Context, *AddVipRequest) (*VipResponse, error)
	//开启会员
	OnVip(context.Context, *OpenOrCloseVipRequest) (*VipResponse, error)
	//修改会员信息
	Edit(context.Context, *EditVipRequest) (*VipResponse, error)
	//关闭会员
	OffVip(context.Context, *OpenOrCloseVipRequest) (*VipResponse, error)
}

// UnimplementedVipServer can be embedded to have forward compatible implementations.
type UnimplementedVipServer struct {
}

func (*UnimplementedVipServer) List(context.Context, *VipListRepuest) (*VipListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedVipServer) Open(context.Context, *OpenVipRepuest) (*VipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (*UnimplementedVipServer) AddVip(context.Context, *AddVipRequest) (*VipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVip not implemented")
}
func (*UnimplementedVipServer) OnVip(context.Context, *OpenOrCloseVipRequest) (*VipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnVip not implemented")
}
func (*UnimplementedVipServer) Edit(context.Context, *EditVipRequest) (*VipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (*UnimplementedVipServer) OffVip(context.Context, *OpenOrCloseVipRequest) (*VipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OffVip not implemented")
}

func RegisterVipServer(s *grpc.Server, srv VipServer) {
	s.RegisterService(&_Vip_serviceDesc, srv)
}

func _Vip_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipListRepuest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interact.Vip/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).List(ctx, req.(*VipListRepuest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenVipRepuest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interact.Vip/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).Open(ctx, req.(*OpenVipRepuest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_AddVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).AddVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interact.Vip/AddVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).AddVip(ctx, req.(*AddVipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_OnVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenOrCloseVipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).OnVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interact.Vip/OnVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).OnVip(ctx, req.(*OpenOrCloseVipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditVipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interact.Vip/Edit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).Edit(ctx, req.(*EditVipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_OffVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenOrCloseVipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).OffVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interact.Vip/OffVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).OffVip(ctx, req.(*OpenOrCloseVipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Vip_serviceDesc = grpc.ServiceDesc{
	ServiceName: "interact.Vip",
	HandlerType: (*VipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Vip_List_Handler,
		},
		{
			MethodName: "Open",
			Handler:    _Vip_Open_Handler,
		},
		{
			MethodName: "AddVip",
			Handler:    _Vip_AddVip_Handler,
		},
		{
			MethodName: "OnVip",
			Handler:    _Vip_OnVip_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _Vip_Edit_Handler,
		},
		{
			MethodName: "OffVip",
			Handler:    _Vip_OffVip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vip.proto",
}
